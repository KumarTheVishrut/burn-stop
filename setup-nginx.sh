#!/bin/bash

# üî•‚ùå BurnStop - Nginx Subdomain Setup Script
# Made with ‚ù§Ô∏è by Vishrut Kumar

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ASCII Art Banner
echo -e "${RED}"
cat << "EOF"
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù 
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     
EOF
echo -e "${NC}"

echo -e "${CYAN}üöÄ BurnStop Nginx Subdomain Configuration Script${NC}"
echo -e "${YELLOW}‚ö° Automating your self-hosting setup!${NC}"
echo ""

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_question() {
    echo -e "${BLUE}[QUESTION]${NC} $1"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   print_error "This script should not be run as root for security reasons."
   print_status "Please run as a regular user with sudo privileges."
   exit 1
fi

# Check if nginx is installed
if ! command -v nginx &> /dev/null; then
    print_warning "Nginx is not installed. Installing nginx..."
    sudo apt update
    sudo apt install -y nginx
    print_status "Nginx installed successfully!"
fi

# Check if certbot is installed
if ! command -v certbot &> /dev/null; then
    print_warning "Certbot is not installed. Installing certbot..."
    sudo apt update
    sudo apt install -y certbot python3-certbot-nginx
    print_status "Certbot installed successfully!"
fi

# Get user input
print_question "Enter your domain name (e.g., example.com):"
read -r DOMAIN

print_question "Enter your subdomain (e.g., burnstop for burnstop.example.com):"
read -r SUBDOMAIN

print_question "Enter your email for SSL certificate:"
read -r EMAIL

# Validate domain format
if [[ ! $DOMAIN =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$ ]]; then
    print_error "Invalid domain format. Please enter a valid domain (e.g., example.com)"
    exit 1
fi

# Set full domain
FULL_DOMAIN="${SUBDOMAIN}.${DOMAIN}"

print_status "Setting up nginx configuration for ${FULL_DOMAIN}"

# Create nginx configuration
NGINX_CONFIG="/etc/nginx/sites-available/${FULL_DOMAIN}"

print_status "Creating nginx configuration file..."

sudo tee "$NGINX_CONFIG" > /dev/null <<EOF
# üî•‚ùå BurnStop Application - Nginx Configuration
# Generated by BurnStop setup script
# Domain: ${FULL_DOMAIN}

server {
    listen 80;
    server_name ${FULL_DOMAIN};

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;

    # Rate limiting
    limit_req_zone \$binary_remote_addr zone=burnstop:10m rate=10r/s;
    limit_req zone=burnstop burst=20 nodelay;

    # Main application proxy
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # API proxy
    location /api/ {
        proxy_pass http://localhost:8000/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "\$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        
        if (\$request_method = 'OPTIONS') {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Static files optimization
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Security: Hide nginx version
    server_tokens off;

    # Logs
    access_log /var/log/nginx/${FULL_DOMAIN}.access.log;
    error_log /var/log/nginx/${FULL_DOMAIN}.error.log;
}
EOF

# Enable the site
print_status "Enabling nginx site..."
sudo ln -sf "$NGINX_CONFIG" "/etc/nginx/sites-enabled/${FULL_DOMAIN}"

# Test nginx configuration
print_status "Testing nginx configuration..."
if sudo nginx -t; then
    print_status "Nginx configuration is valid!"
else
    print_error "Nginx configuration test failed!"
    exit 1
fi

# Reload nginx
print_status "Reloading nginx..."
sudo systemctl reload nginx

# Setup SSL with Let's Encrypt
print_status "Setting up SSL certificate with Let's Encrypt..."
print_warning "Make sure your domain ${FULL_DOMAIN} points to this server's IP address!"

read -p "$(echo -e ${BLUE}[QUESTION]${NC} Have you configured DNS for ${FULL_DOMAIN} to point to this server? [y/N]: )" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_status "Obtaining SSL certificate..."
    if sudo certbot --nginx -d "$FULL_DOMAIN" --email "$EMAIL" --agree-tos --non-interactive; then
        print_status "SSL certificate obtained successfully!"
    else
        print_warning "SSL certificate setup failed. You can try running it manually later:"
        echo "sudo certbot --nginx -d $FULL_DOMAIN --email $EMAIL --agree-tos"
    fi
else
    print_warning "SSL setup skipped. Configure DNS first, then run:"
    echo "sudo certbot --nginx -d $FULL_DOMAIN --email $EMAIL --agree-tos"
fi

# Setup automatic certificate renewal
print_status "Setting up automatic SSL certificate renewal..."
(sudo crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | sudo crontab -

# Create systemd service for BurnStop (optional)
print_question "Do you want to create a systemd service for auto-starting BurnStop? [y/N]:"
read -r CREATE_SERVICE

if [[ $CREATE_SERVICE =~ ^[Yy]$ ]]; then
    print_status "Creating systemd service..."
    
    sudo tee "/etc/systemd/system/burnstop.service" > /dev/null <<EOF
[Unit]
Description=BurnStop Application
After=network.target docker.service
Requires=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$(pwd)
ExecStart=/usr/bin/docker-compose up -d
ExecStop=/usr/bin/docker-compose down
TimeoutStartSec=0
User=$(whoami)
Group=docker

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    sudo systemctl enable burnstop.service
    print_status "Systemd service created and enabled!"
fi

# Final status and instructions
echo ""
echo -e "${GREEN}üéâ SUCCESS! BurnStop nginx configuration completed!${NC}"
echo ""
echo -e "${CYAN}üìã Configuration Summary:${NC}"
echo -e "   ${YELLOW}Domain:${NC} ${FULL_DOMAIN}"
echo -e "   ${YELLOW}Frontend:${NC} http://${FULL_DOMAIN} (proxies to localhost:3000)"
echo -e "   ${YELLOW}API:${NC} http://${FULL_DOMAIN}/api (proxies to localhost:8000)"
echo -e "   ${YELLOW}Config File:${NC} ${NGINX_CONFIG}"
echo ""
echo -e "${CYAN}üöÄ Next Steps:${NC}"
echo -e "   1. Start BurnStop: ${YELLOW}docker-compose up -d${NC}"
echo -e "   2. Visit: ${YELLOW}https://${FULL_DOMAIN}${NC}"
echo -e "   3. Check logs: ${YELLOW}sudo tail -f /var/log/nginx/${FULL_DOMAIN}.access.log${NC}"
echo ""
echo -e "${PURPLE}üîí Security Features Enabled:${NC}"
echo -e "   ‚úÖ SSL/TLS encryption (if certbot succeeded)"
echo -e "   ‚úÖ Security headers (XSS, CSRF protection)"
echo -e "   ‚úÖ Rate limiting (10 req/s per IP)"
echo -e "   ‚úÖ Gzip compression"
echo -e "   ‚úÖ CORS properly configured"
echo ""
echo -e "${GREEN}Made with ‚ù§Ô∏è by Vishrut Kumar${NC}"
echo -e "${CYAN}https://kumarthevishrut.github.io/Portfolio-Website/${NC}" 